extends Node2D

signal spawned(object)

@export var plus_text := "NULL"
@export var object_spawning: PackedScene = null
@export var initial_delay := 0.0
@export var timer_duration := 1.0
@export var timer_randomizer: = 0.5 # (float, 0.0, 1.0)
@export var min_duration := 0.25
@export var dropoff: = 0.1 # (float, 0.0, 1.0)
@export var autostart := true

@export var starting_orbs := 1
@export var finishing_orbs := 5
@export var dropoff_per_orb := 0.1

var FloatingLabel: = preload("res://framework/node_modules/floating_label/FloatingLabel.tscn")

var _enabled: = false
var _start_initial_duration: = 0.0
var _early_stop: = false

var first_thingy: = true

@onready var timer: = $Timer



func real_start() -> void :
	timer.connect("timeout", Callable(self, "_on_timer_timeout"))

	_start_initial_duration = timer_duration

	
	
	
	
	
	
	


func _process(delta):
	if first_thingy and Game.level._score >= starting_orbs:
		Game.level.spawn_plus_label(plus_text)

		first_thingy = false
		_enabled = true
		_update_timer_duration(false)
		await get_tree().create_timer(0.8, false).timeout
		_spawn()
		timer.start()



func start() -> void :
	_enabled = true
	timer.start()


func stop() -> void :
	_early_stop = true
	_enabled = false
	timer.stop()


func reset() -> void :
	timer_duration = _start_initial_duration


func _spawn() -> void :
	var obj = object_spawning.instantiate()
	add_child(obj)
	emit_signal("spawned", obj)


func _update_timer_duration(tick_dropoff = true) -> void :
	
	
	

	timer.wait_time = max(timer_duration - (Game.level._score - starting_orbs) * dropoff_per_orb, min_duration)



func _on_timer_timeout() -> void :
	if _enabled:
		if finishing_orbs > 0 and Game.level._score >= finishing_orbs:
			stop()
		else:
			_update_timer_duration()
			timer.start()
			_spawn()
