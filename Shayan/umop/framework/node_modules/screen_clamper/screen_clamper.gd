extends Node2D

@export (NodePath)onready var target = (get_node(target) as Node2D) if target else get_parent()
@export (NodePath)onready var offset_target = (get_node(offset_target) as Node2D) if offset_target else null

var _clamped_offset: = Vector2.ZERO
var _shape_offset_points: = []

var variable_offset: = Vector2.ZERO

@onready var clamp_shape: = $ClampArea / CollisionShape2D



func _ready() -> void :
	var shape_extents = clamp_shape.shape.extents

	_shape_offset_points.resize(4)
	_shape_offset_points[0] = Vector2( - shape_extents.x, - shape_extents.y)
	_shape_offset_points[1] = Vector2(shape_extents.x, - shape_extents.y)
	_shape_offset_points[2] = Vector2(shape_extents.x, shape_extents.y)
	_shape_offset_points[3] = Vector2( - shape_extents.x, shape_extents.y)


func _process(_delta: float) -> void :
	if offset_target:
		variable_offset = offset_target.position

	if Game.camera and is_instance_valid(Game.camera):
		var camera_rect = Rect2(Game.camera.position - get_viewport().size / 2, get_viewport().size)

		target.position -= _clamped_offset
		var compounded_target_position = target.position + variable_offset + clamp_shape.position

		var out_of_bounds: = false
		for offset in _shape_offset_points:
			if not camera_rect.has_point(compounded_target_position + offset):
				out_of_bounds = true
				break;

		if out_of_bounds:
			var clamped_position = compounded_target_position
			for offset in _shape_offset_points:
				clamped_position = clamp_to_rect_with_offset(clamped_position, offset, camera_rect)

			_clamped_offset = clamped_position - compounded_target_position

		target.position += _clamped_offset


func clamp_to_rect_with_offset(vector: Vector2, offset: Vector2, rect: Rect2) -> Vector2:
	return Utils.clamp_vector_to_rect(vector + offset, rect) - offset
