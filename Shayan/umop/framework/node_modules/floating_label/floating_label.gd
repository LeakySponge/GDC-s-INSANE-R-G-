extends Node2D

@export var duration := 2
@export var distance := 15
@export var blink_count := 4
@export var blink_duration := 0.1
@export var friction := 15

var velocity: = Vector2.ZERO

@onready var visuals: = $Visuals
@onready var label: = $Visuals / Label
@onready var shadow_label: = $Visuals / ShadowLabel
@onready var tween: = $Tween
@onready var blink_timer: = $BlinkTimer



func _ready() -> void :
	blink_timer.connect("timeout", Callable(self, "_on_blink_timer_timeout"))

	blink_timer.wait_time = blink_duration

	tween.interpolate_property(visuals, "scale", Vector2(1.35, 0.0), Vector2.ONE, 0.25, Tween.TRANS_CUBIC, Tween.EASE_OUT)
	tween.interpolate_property(visuals, "position", visuals.position, visuals.position + Vector2.UP * distance, duration, Tween.TRANS_QUART, Tween.EASE_OUT)
	tween.start()

	await tween.tween_all_completed
	destroy()


func _physics_process(delta: float) -> void :
	velocity = lerp(Vector2.ZERO, velocity, pow(2, - friction * delta))
	position += velocity * delta



func set_text(string: String) -> void :
	label.text = string
	shadow_label.text = string


func blink() -> void :
	if blink_count > 0:
		blink_timer.start()
		blink_count -= 1
		visible = not visible


func destroy() -> void :
	tween.interpolate_property(visuals, "scale", Vector2(0.75, 1.5), Vector2(1.1, 0.0), 0.1, Tween.TRANS_CUBIC, Tween.EASE_OUT)
	tween.start()

	await tween.tween_all_completed
	queue_free()



func _on_blink_timer_timeout() -> void :
	blink()
